#!/usr/bin/env bash

configure_pod () {

    POD_NAME=$1
    COMPONENT=$2
    INI_PATH=ini/${COMPONENT}.yaml

    TARGET_PATH_DIR=default/${POD_NAME}:/etc/cloudify

    set_active_manager_ip ${POD_NAME}

    if [[ -z "${ACTIVE_MANAGER_IP}" ]]; then
        log_message "Configuring pod ${POD_NAME}."
    else
        log_message "Configuring pod ${POD_NAME} and adding to active-active manager cluster member. Active Manager IP address is ${ACTIVE_MANAGER_IP}."
        INI_PATH=ini/next-worker.yaml
    fi

    cp ${INI_PATH} ${INI_PATH}.copy
    INI_PATH=${INI_PATH}.copy

    log_message "Trying to get the IP of ${POD_NAME}."
    PRIVATE_IP=$(retry_get_private_ip $POD_NAME)
    log_message "Private IP address is ${PRIVATE_IP}."
    SERVICE_IP=$(kubectl get services cloudify-manager-$COMPONENT | awk '{if(NR>1)print $3}')
    log_message "Service IP address is ${SERVICE_IP}."
    RABBIT_IP=$(kubectl get services cloudify-manager-rabbitmq | awk '{if(NR>1)print $3}')
    PG_IP=$(kubectl get services cloudify-manager-postgresql | awk '{if(NR>1)print $3}')

    replace_string PRIVATE_IP ${PRIVATE_IP} ${INI_PATH}
    replace_string PUBLIC_IP ${SERVICE_IP} ${INI_PATH}
    replace_string ACTIVE_MANAGER_IP ${ACTIVE_MANAGER_IP} ${INI_PATH}
    replace_string ACTIVE_PASSWORD ${ADMIN_PASSWORD} ${INI_PATH}
    replace_string CERTIFICATENAME ${POD_NAME} ${INI_PATH}
    replace_string REPLACE_RABBIT_IP ${RABBIT_IP} ${INI_PATH}
    replace_string REPLACE_POSTGRESQL_IP ${PG_IP} ${INI_PATH}

    log_message "Copying config file: ${INI_PATH} ${TARGET_PATH_DIR}/config.yaml"
    retry_command "kubectl cp ${INI_PATH} ${TARGET_PATH_DIR}/config.yaml"

    #TODO: This should be completely unnecessary, but it's not.
    kubectl exec -it ${POD_NAME} -- chown cfyuser:cfyuser /etc/cloudify/config.yaml

    log_message "Copying SSL."
    retry_command "kubectl cp ${LOCAL_CERTS_FOLDER} ${TARGET_PATH_DIR}/ssl"

    # This command has a problem with protection. TODO: Fix it.
    kubectl exec -it ${POD_NAME} -- cfy_manager configure

}

configure_all_pods () {
    _ALL_PODS=($@)
    for POD in "${_ALL_PODS[@]}"; do
        log_message "Configuring ${POD}."
        case ${POD} in
            (*"postgresql"*) configure_pod ${POD} postgresql;;
            (*"rabbitmq"*) configure_pod ${POD} rabbitmq;;
            (*"worker"*) configure_pod ${POD} worker;;
            (*) log_message "Bad pod name: ${POD}."; exit
        esac
    done
}
