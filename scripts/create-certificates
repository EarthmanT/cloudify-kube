#!/usr/bin/env bash

export LOCAL_CONFIG_FOLDER=certificates/configs
export LOCAL_CERTS_FOLDER=certificates/results
export LOCAL_TEMP_FOLDER=certificates/temp
export FINAL_CERTS_FOLDER=/etc/cloudify/ssl

create_csr_and_cert () {

    if [[ -z "${1}" ]]; then
        log_message "You must provide a Pod name as a first argument."
        exit 1
    else
        PODNAME=$1
    fi

    if [[ -z "${2}" ]]; then
        log_message "You must provide a component name as a second argument."
        exit 1
    else
        COMPONENT=$2
    fi

    if [[ -z "${3}" ]]; then
        SERVER=server
    else
        SERVER=$3
    fi

    log_message "Creating certs and keys for component ${COMPONENT}."

    log_message "Exporting variables."
    CSR_CONFIG_FILE_NAME=csr_config_${COMPONENT}
    CSR_FILE_NAME=csr_config_${PODNAME}_out.csr
    CERT_FILE_NAME=${PODNAME}.crt
    KEY_FILE_NAME=${PODNAME}.key
    log_message "Getting the IP of ${COMPONENT} service."
    SERVICE_IP=$(kubectl get services cloudify-manager-$COMPONENT | awk '{if(NR>1)print $3}')
    log_message "${COMPONENT} service IP: ${SERVICE_IP}"
    replace_string REPLACE_IP ${SERVICE_IP} "${LOCAL_CONFIG_FOLDER}/$CSR_CONFIG_FILE_NAME"
    log_message "Creating keys."
    openssl req -newkey rsa:2048 -nodes -batch -sha256 \
        -config ${LOCAL_CONFIG_FOLDER}/$CSR_CONFIG_FILE_NAME \
        -out $LOCAL_TEMP_FOLDER/$CSR_FILE_NAME \
        -keyout ${LOCAL_CERTS_FOLDER}/$KEY_FILE_NAME

    RESULT=$?
    if [[ $RESULT -eq 0 ]]; then
        log_message "Succeeded creating keys."
    else
        log_message "Failed creating keys. Run cloudify-manager-down."
        exit 1
    fi

    log_message "Creating certificates."
    openssl x509 -days 3650 -sha256 -req \
        -in $LOCAL_TEMP_FOLDER/$CSR_FILE_NAME \
        -out ${LOCAL_CERTS_FOLDER}/$CERT_FILE_NAME \
        -extensions server_req_extensions \
        -extfile ${LOCAL_CONFIG_FOLDER}/$CSR_CONFIG_FILE_NAME \
        -CA ${LOCAL_CERTS_FOLDER}/root.crt \
        -CAkey ${LOCAL_CERTS_FOLDER}/root.key -CAcreateserial

    RESULT=$?
    if [[ $RESULT -ne 0 ]]; then
        log_message "Failed creating keys. Run cloudify-manager-down."
        exit 1
    fi

}

certify_pods () {
    _ALL_PODS=($@)
    for POD in "${_ALL_PODS[@]}"; do
        log_message "Creating pod ${POD} certificate."
        case ${POD} in
            (*"postgresql"*) create_csr_and_cert ${POD} postgresql server;;
            (*"rabbitmq"*) create_csr_and_cert ${POD} rabbitmq server;;
            (*"worker"*) create_csr_and_cert ${POD} worker client;;
            (*) log_message "Bad pod name: ${POD}."; exit
        esac
    done
}
